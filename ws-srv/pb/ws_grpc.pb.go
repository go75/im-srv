// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: ws.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebSocketClient is the client API for WebSocket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebSocketClient interface {
	// ================================================好友模块================================================
	// 获取好友会话
	GetFriendSession(ctx context.Context, in *Id2, opts ...grpc.CallOption) (*UserMessages, error)
	// 获取新好友信息
	GetNewFriend(ctx context.Context, in *ProcessId, opts ...grpc.CallOption) (*Users, error)
	// 用户消息持久化
	SaveUserMessage(ctx context.Context, in *UserMessage, opts ...grpc.CallOption) (*Ok, error)
	// 获取好友列表
	GetFriendList(ctx context.Context, in *ProcessId, opts ...grpc.CallOption) (*Users, error)
	// 添加好友
	AddFriend(ctx context.Context, in *Id2, opts ...grpc.CallOption) (*User, error)
	// 通过用户名称模糊查询用户
	GetFuzzyUserByUserName(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Users, error)
	// 同意新好友请求
	AgreeNewFriend(ctx context.Context, in *Id2, opts ...grpc.CallOption) (*User, error)
	// 拒绝新好友请求
	RefuseNewFriend(ctx context.Context, in *Id2, opts ...grpc.CallOption) (*Ok, error)
	// ================================================群聊模块================================================
	// 获取群聊会话
	GetGroupSession(ctx context.Context, in *ProcessId, opts ...grpc.CallOption) (*GroupMessages, error)
	// 获取新群聊信息
	GetNewGroup(ctx context.Context, in *ProcessId, opts ...grpc.CallOption) (*NewGroupMessages, error)
	// 发送群聊消息
	SendGroupMsg(ctx context.Context, in *GroupMessage, opts ...grpc.CallOption) (*SendGroupMsgRes, error)
	// 获取群聊列表
	GetGroupList(ctx context.Context, in *ProcessId, opts ...grpc.CallOption) (*Groups, error)
	// 添加群聊
	AddGroup(ctx context.Context, in *AddGroupReq, opts ...grpc.CallOption) (*AddGroupRes, error)
	// 通过群聊名称模糊查询群聊
	GetFuzzyGroupByGroupName(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Groups, error)
	// 同意新群友请求
	AgreeNewGroup(ctx context.Context, in *AgreeNewGroupReq, opts ...grpc.CallOption) (*AgreeNewGroupRes, error)
	// 拒绝新群友请求
	RefuseNewGroup(ctx context.Context, in *Id2, opts ...grpc.CallOption) (*Ok, error)
}

type webSocketClient struct {
	cc grpc.ClientConnInterface
}

func NewWebSocketClient(cc grpc.ClientConnInterface) WebSocketClient {
	return &webSocketClient{cc}
}

func (c *webSocketClient) GetFriendSession(ctx context.Context, in *Id2, opts ...grpc.CallOption) (*UserMessages, error) {
	out := new(UserMessages)
	err := c.cc.Invoke(ctx, "/WebSocket/GetFriendSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSocketClient) GetNewFriend(ctx context.Context, in *ProcessId, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/WebSocket/GetNewFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSocketClient) SaveUserMessage(ctx context.Context, in *UserMessage, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/WebSocket/SaveUserMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSocketClient) GetFriendList(ctx context.Context, in *ProcessId, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/WebSocket/GetFriendList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSocketClient) AddFriend(ctx context.Context, in *Id2, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/WebSocket/AddFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSocketClient) GetFuzzyUserByUserName(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/WebSocket/GetFuzzyUserByUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSocketClient) AgreeNewFriend(ctx context.Context, in *Id2, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/WebSocket/AgreeNewFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSocketClient) RefuseNewFriend(ctx context.Context, in *Id2, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/WebSocket/RefuseNewFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSocketClient) GetGroupSession(ctx context.Context, in *ProcessId, opts ...grpc.CallOption) (*GroupMessages, error) {
	out := new(GroupMessages)
	err := c.cc.Invoke(ctx, "/WebSocket/GetGroupSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSocketClient) GetNewGroup(ctx context.Context, in *ProcessId, opts ...grpc.CallOption) (*NewGroupMessages, error) {
	out := new(NewGroupMessages)
	err := c.cc.Invoke(ctx, "/WebSocket/GetNewGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSocketClient) SendGroupMsg(ctx context.Context, in *GroupMessage, opts ...grpc.CallOption) (*SendGroupMsgRes, error) {
	out := new(SendGroupMsgRes)
	err := c.cc.Invoke(ctx, "/WebSocket/SendGroupMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSocketClient) GetGroupList(ctx context.Context, in *ProcessId, opts ...grpc.CallOption) (*Groups, error) {
	out := new(Groups)
	err := c.cc.Invoke(ctx, "/WebSocket/GetGroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSocketClient) AddGroup(ctx context.Context, in *AddGroupReq, opts ...grpc.CallOption) (*AddGroupRes, error) {
	out := new(AddGroupRes)
	err := c.cc.Invoke(ctx, "/WebSocket/AddGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSocketClient) GetFuzzyGroupByGroupName(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Groups, error) {
	out := new(Groups)
	err := c.cc.Invoke(ctx, "/WebSocket/GetFuzzyGroupByGroupName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSocketClient) AgreeNewGroup(ctx context.Context, in *AgreeNewGroupReq, opts ...grpc.CallOption) (*AgreeNewGroupRes, error) {
	out := new(AgreeNewGroupRes)
	err := c.cc.Invoke(ctx, "/WebSocket/AgreeNewGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSocketClient) RefuseNewGroup(ctx context.Context, in *Id2, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/WebSocket/RefuseNewGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebSocketServer is the server API for WebSocket service.
// All implementations should embed UnimplementedWebSocketServer
// for forward compatibility
type WebSocketServer interface {
	// ================================================好友模块================================================
	// 获取好友会话
	GetFriendSession(context.Context, *Id2) (*UserMessages, error)
	// 获取新好友信息
	GetNewFriend(context.Context, *ProcessId) (*Users, error)
	// 用户消息持久化
	SaveUserMessage(context.Context, *UserMessage) (*Ok, error)
	// 获取好友列表
	GetFriendList(context.Context, *ProcessId) (*Users, error)
	// 添加好友
	AddFriend(context.Context, *Id2) (*User, error)
	// 通过用户名称模糊查询用户
	GetFuzzyUserByUserName(context.Context, *Name) (*Users, error)
	// 同意新好友请求
	AgreeNewFriend(context.Context, *Id2) (*User, error)
	// 拒绝新好友请求
	RefuseNewFriend(context.Context, *Id2) (*Ok, error)
	// ================================================群聊模块================================================
	// 获取群聊会话
	GetGroupSession(context.Context, *ProcessId) (*GroupMessages, error)
	// 获取新群聊信息
	GetNewGroup(context.Context, *ProcessId) (*NewGroupMessages, error)
	// 发送群聊消息
	SendGroupMsg(context.Context, *GroupMessage) (*SendGroupMsgRes, error)
	// 获取群聊列表
	GetGroupList(context.Context, *ProcessId) (*Groups, error)
	// 添加群聊
	AddGroup(context.Context, *AddGroupReq) (*AddGroupRes, error)
	// 通过群聊名称模糊查询群聊
	GetFuzzyGroupByGroupName(context.Context, *Name) (*Groups, error)
	// 同意新群友请求
	AgreeNewGroup(context.Context, *AgreeNewGroupReq) (*AgreeNewGroupRes, error)
	// 拒绝新群友请求
	RefuseNewGroup(context.Context, *Id2) (*Ok, error)
}

// UnimplementedWebSocketServer should be embedded to have forward compatible implementations.
type UnimplementedWebSocketServer struct {
}

func (UnimplementedWebSocketServer) GetFriendSession(context.Context, *Id2) (*UserMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendSession not implemented")
}
func (UnimplementedWebSocketServer) GetNewFriend(context.Context, *ProcessId) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewFriend not implemented")
}
func (UnimplementedWebSocketServer) SaveUserMessage(context.Context, *UserMessage) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUserMessage not implemented")
}
func (UnimplementedWebSocketServer) GetFriendList(context.Context, *ProcessId) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendList not implemented")
}
func (UnimplementedWebSocketServer) AddFriend(context.Context, *Id2) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFriend not implemented")
}
func (UnimplementedWebSocketServer) GetFuzzyUserByUserName(context.Context, *Name) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFuzzyUserByUserName not implemented")
}
func (UnimplementedWebSocketServer) AgreeNewFriend(context.Context, *Id2) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgreeNewFriend not implemented")
}
func (UnimplementedWebSocketServer) RefuseNewFriend(context.Context, *Id2) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefuseNewFriend not implemented")
}
func (UnimplementedWebSocketServer) GetGroupSession(context.Context, *ProcessId) (*GroupMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupSession not implemented")
}
func (UnimplementedWebSocketServer) GetNewGroup(context.Context, *ProcessId) (*NewGroupMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewGroup not implemented")
}
func (UnimplementedWebSocketServer) SendGroupMsg(context.Context, *GroupMessage) (*SendGroupMsgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGroupMsg not implemented")
}
func (UnimplementedWebSocketServer) GetGroupList(context.Context, *ProcessId) (*Groups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupList not implemented")
}
func (UnimplementedWebSocketServer) AddGroup(context.Context, *AddGroupReq) (*AddGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroup not implemented")
}
func (UnimplementedWebSocketServer) GetFuzzyGroupByGroupName(context.Context, *Name) (*Groups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFuzzyGroupByGroupName not implemented")
}
func (UnimplementedWebSocketServer) AgreeNewGroup(context.Context, *AgreeNewGroupReq) (*AgreeNewGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgreeNewGroup not implemented")
}
func (UnimplementedWebSocketServer) RefuseNewGroup(context.Context, *Id2) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefuseNewGroup not implemented")
}

// UnsafeWebSocketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebSocketServer will
// result in compilation errors.
type UnsafeWebSocketServer interface {
	mustEmbedUnimplementedWebSocketServer()
}

func RegisterWebSocketServer(s grpc.ServiceRegistrar, srv WebSocketServer) {
	s.RegisterService(&WebSocket_ServiceDesc, srv)
}

func _WebSocket_GetFriendSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSocketServer).GetFriendSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebSocket/GetFriendSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSocketServer).GetFriendSession(ctx, req.(*Id2))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSocket_GetNewFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSocketServer).GetNewFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebSocket/GetNewFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSocketServer).GetNewFriend(ctx, req.(*ProcessId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSocket_SaveUserMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSocketServer).SaveUserMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebSocket/SaveUserMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSocketServer).SaveUserMessage(ctx, req.(*UserMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSocket_GetFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSocketServer).GetFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebSocket/GetFriendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSocketServer).GetFriendList(ctx, req.(*ProcessId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSocket_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSocketServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebSocket/AddFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSocketServer).AddFriend(ctx, req.(*Id2))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSocket_GetFuzzyUserByUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSocketServer).GetFuzzyUserByUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebSocket/GetFuzzyUserByUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSocketServer).GetFuzzyUserByUserName(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSocket_AgreeNewFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSocketServer).AgreeNewFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebSocket/AgreeNewFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSocketServer).AgreeNewFriend(ctx, req.(*Id2))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSocket_RefuseNewFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSocketServer).RefuseNewFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebSocket/RefuseNewFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSocketServer).RefuseNewFriend(ctx, req.(*Id2))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSocket_GetGroupSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSocketServer).GetGroupSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebSocket/GetGroupSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSocketServer).GetGroupSession(ctx, req.(*ProcessId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSocket_GetNewGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSocketServer).GetNewGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebSocket/GetNewGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSocketServer).GetNewGroup(ctx, req.(*ProcessId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSocket_SendGroupMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSocketServer).SendGroupMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebSocket/SendGroupMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSocketServer).SendGroupMsg(ctx, req.(*GroupMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSocket_GetGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSocketServer).GetGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebSocket/GetGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSocketServer).GetGroupList(ctx, req.(*ProcessId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSocket_AddGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSocketServer).AddGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebSocket/AddGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSocketServer).AddGroup(ctx, req.(*AddGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSocket_GetFuzzyGroupByGroupName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSocketServer).GetFuzzyGroupByGroupName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebSocket/GetFuzzyGroupByGroupName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSocketServer).GetFuzzyGroupByGroupName(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSocket_AgreeNewGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgreeNewGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSocketServer).AgreeNewGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebSocket/AgreeNewGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSocketServer).AgreeNewGroup(ctx, req.(*AgreeNewGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSocket_RefuseNewGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSocketServer).RefuseNewGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebSocket/RefuseNewGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSocketServer).RefuseNewGroup(ctx, req.(*Id2))
	}
	return interceptor(ctx, in, info, handler)
}

// WebSocket_ServiceDesc is the grpc.ServiceDesc for WebSocket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebSocket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WebSocket",
	HandlerType: (*WebSocketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFriendSession",
			Handler:    _WebSocket_GetFriendSession_Handler,
		},
		{
			MethodName: "GetNewFriend",
			Handler:    _WebSocket_GetNewFriend_Handler,
		},
		{
			MethodName: "SaveUserMessage",
			Handler:    _WebSocket_SaveUserMessage_Handler,
		},
		{
			MethodName: "GetFriendList",
			Handler:    _WebSocket_GetFriendList_Handler,
		},
		{
			MethodName: "AddFriend",
			Handler:    _WebSocket_AddFriend_Handler,
		},
		{
			MethodName: "GetFuzzyUserByUserName",
			Handler:    _WebSocket_GetFuzzyUserByUserName_Handler,
		},
		{
			MethodName: "AgreeNewFriend",
			Handler:    _WebSocket_AgreeNewFriend_Handler,
		},
		{
			MethodName: "RefuseNewFriend",
			Handler:    _WebSocket_RefuseNewFriend_Handler,
		},
		{
			MethodName: "GetGroupSession",
			Handler:    _WebSocket_GetGroupSession_Handler,
		},
		{
			MethodName: "GetNewGroup",
			Handler:    _WebSocket_GetNewGroup_Handler,
		},
		{
			MethodName: "SendGroupMsg",
			Handler:    _WebSocket_SendGroupMsg_Handler,
		},
		{
			MethodName: "GetGroupList",
			Handler:    _WebSocket_GetGroupList_Handler,
		},
		{
			MethodName: "AddGroup",
			Handler:    _WebSocket_AddGroup_Handler,
		},
		{
			MethodName: "GetFuzzyGroupByGroupName",
			Handler:    _WebSocket_GetFuzzyGroupByGroupName_Handler,
		},
		{
			MethodName: "AgreeNewGroup",
			Handler:    _WebSocket_AgreeNewGroup_Handler,
		},
		{
			MethodName: "RefuseNewGroup",
			Handler:    _WebSocket_RefuseNewGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ws.proto",
}
