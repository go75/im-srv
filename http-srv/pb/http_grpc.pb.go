// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: http.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HTTPClient is the client API for HTTP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HTTPClient interface {
	// 创建用户
	UserRegist(ctx context.Context, in *UserRegistInfo, opts ...grpc.CallOption) (*UserRegistRes, error)
	// 用户登录
	UserLogin(ctx context.Context, in *UserLoginInfo, opts ...grpc.CallOption) (*UserLoginRes, error)
	// 创建群聊
	GroupRegist(ctx context.Context, in *GroupRegistInfo, opts ...grpc.CallOption) (*GroupRegistRes, error)
}

type hTTPClient struct {
	cc grpc.ClientConnInterface
}

func NewHTTPClient(cc grpc.ClientConnInterface) HTTPClient {
	return &hTTPClient{cc}
}

func (c *hTTPClient) UserRegist(ctx context.Context, in *UserRegistInfo, opts ...grpc.CallOption) (*UserRegistRes, error) {
	out := new(UserRegistRes)
	err := c.cc.Invoke(ctx, "/HTTP/UserRegist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPClient) UserLogin(ctx context.Context, in *UserLoginInfo, opts ...grpc.CallOption) (*UserLoginRes, error) {
	out := new(UserLoginRes)
	err := c.cc.Invoke(ctx, "/HTTP/UserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPClient) GroupRegist(ctx context.Context, in *GroupRegistInfo, opts ...grpc.CallOption) (*GroupRegistRes, error) {
	out := new(GroupRegistRes)
	err := c.cc.Invoke(ctx, "/HTTP/GroupRegist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HTTPServer is the server API for HTTP service.
// All implementations should embed UnimplementedHTTPServer
// for forward compatibility
type HTTPServer interface {
	// 创建用户
	UserRegist(context.Context, *UserRegistInfo) (*UserRegistRes, error)
	// 用户登录
	UserLogin(context.Context, *UserLoginInfo) (*UserLoginRes, error)
	// 创建群聊
	GroupRegist(context.Context, *GroupRegistInfo) (*GroupRegistRes, error)
}

// UnimplementedHTTPServer should be embedded to have forward compatible implementations.
type UnimplementedHTTPServer struct {
}

func (UnimplementedHTTPServer) UserRegist(context.Context, *UserRegistInfo) (*UserRegistRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegist not implemented")
}
func (UnimplementedHTTPServer) UserLogin(context.Context, *UserLoginInfo) (*UserLoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedHTTPServer) GroupRegist(context.Context, *GroupRegistInfo) (*GroupRegistRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupRegist not implemented")
}

// UnsafeHTTPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HTTPServer will
// result in compilation errors.
type UnsafeHTTPServer interface {
	mustEmbedUnimplementedHTTPServer()
}

func RegisterHTTPServer(s grpc.ServiceRegistrar, srv HTTPServer) {
	s.RegisterService(&HTTP_ServiceDesc, srv)
}

func _HTTP_UserRegist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegistInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPServer).UserRegist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HTTP/UserRegist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPServer).UserRegist(ctx, req.(*UserRegistInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTP_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HTTP/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPServer).UserLogin(ctx, req.(*UserLoginInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTP_GroupRegist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRegistInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPServer).GroupRegist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HTTP/GroupRegist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPServer).GroupRegist(ctx, req.(*GroupRegistInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// HTTP_ServiceDesc is the grpc.ServiceDesc for HTTP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HTTP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HTTP",
	HandlerType: (*HTTPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserRegist",
			Handler:    _HTTP_UserRegist_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _HTTP_UserLogin_Handler,
		},
		{
			MethodName: "GroupRegist",
			Handler:    _HTTP_GroupRegist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "http.proto",
}
